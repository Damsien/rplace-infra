apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: rplace
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      serviceAccountName: internal-kubectl
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - redis
            topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: config
        image: redis:6.2.4
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-password
        command: [ "bash", "-c" ]
        args:
          - |
            # Install curl
            rm -rf /var/lib/apt/lists/*
            apt-get clean
            apt-get update -y --no-allow-insecure-repositories --allow-unauthenticated
            apt-get upgrade -y --no-allow-insecure-repositories --allow-unauthenticated
            apt-get install curl -y

            # Install kubectl binary
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl

            cp /tmp/redis/redis.conf /etc/redis/redis.conf

            # Set password in the config file
            sed -i "s/VERY_SECRET_PASSWORD/$REDIS_PASSWORD/" /etc/redis/redis.conf
            
            echo "finding master..."
            MASTER_FDQN=`hostname  -f | sed -e 's/redis-[0-9]\./redis-0./'`
            if [ "$(redis-cli -h sentinel -p 5000 ping)" != "PONG" ]; then
              echo "master not found, defaulting to redis-0"

              if [ "$(hostname)" = "redis-0" ]; then
                echo "this is redis-0, not updating config..."
                kubectl label pods $(hostname) node=master -n rplace
              else
                echo "updating redis.conf..."
                echo "" >> /etc/redis/redis.conf
                echo "replicaof $MASTER_FDQN 6379" >> /etc/redis/redis.conf
                kubectl label pods $(hostname) node=slave -n rplace
              fi
            else
              echo "sentinel found, finding master"
              MASTER="$(redis-cli -h sentinel -p 5000 sentinel get-master-addr-by-name mymaster | grep -E '(^redis-\d{1,})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})')"
              echo "master found : $MASTER, updating redis.conf"
              echo "" >> /etc/redis/redis.conf
              echo "slaveof $MASTER 6379" >> /etc/redis/redis.conf
              kubectl label pods $(hostname) node=slave -n rplace
              masterName=$(kubectl get pods -o custom-columns=:metadata.name --no-headers=true --field-selector status.podIP=${MASTER})
              if [ "$masterName" == "" ]; then
                arrIN=(${MASTER//./ })
                masterName=${arrIN[0]}
              fi
              kubectl label --overwrite pods $masterName node=master -n rplace
            fi
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
        - name: config
          mountPath: /tmp/redis/
      containers:
      - name: redis
        imagePullPolicy: IfNotPresent
        image: redis/redis-stack-server:7.0.6-RC3
        command: ["redis-stack-server"]
        args: ["/etc/redis/redis.conf"]
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis-stack/
        - name: redis-config
          mountPath: /etc/redis/
      volumes:
      - name: redis-config
        emptyDir: {}
      - name: config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "local-ssd"
      resources:
        requests:
          storage: {{ .Values.redis.CAPACITY }}
